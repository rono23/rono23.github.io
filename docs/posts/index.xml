<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on rono23</title><link>https://rono23.com/posts/</link><description>Recent content in Posts on rono23</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 07 Jun 2024 00:00:00 +0900</lastBuildDate><atom:link href="https://rono23.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>台湾と旅と</title><link>https://rono23.com/posts/2024-06-08/</link><pubDate>Fri, 07 Jun 2024 00:00:00 +0900</pubDate><guid>https://rono23.com/posts/2024-06-08/</guid><description>ここ数年は北は北海道、南は九州まで国内をぶらぶらしてたけど、久しぶりに外国、台湾へ。
LCCの深夜便で行って空港のベンチで寝てから街に繰り出す作戦が、機内では座席があまり倒せず寝づらかったり、空港は少し寒くて1時間位しか寝れなかったので、朝マックでのんびり。 その後、眠気がやばかったので早めに宿に向かい、休憩代として +α 支払ってチェックインできてよかった。
梅雨の時期の台湾は湿度が高く暑い。東京の梅雨よりも暑くじめじめしてて、デニム履いてると10分歩くだけでかなり蒸れる。外を歩くなら半袖短パンでよかったが、カフェなど冷房が効いてる場所に長時間いるとちょい寒いかも。
どこに行っても適当に歩いて気になった場所があれば入ってみるを繰り返した結果、7日で約100km歩いてたときは疲れた…
でも、魅力的な路地裏とか隘路見つけると歩きたくなっちゃいますよね。
Googleマップには何度も騙されて、夜に誰もいない細道を歩き、行き止まりだったこともしばしば。場所によっては怖かったので要注意ですねー。
国立台湾文学館 観光地?で1番楽しかったのが、国立台湾文学館。
平常展の文学の力 ─ 私たちの台湾を書くでは、台湾文学の成り立ちが時系列で説明されていてすごいよかった。台湾文学は客家の女たちなど数冊しか読んだことがなかったので、これを機会に読みたいが積読が…
才能あふれる作家たち アメリカと台湾のモダニズム文学特別展では、フィッツジェラルドやヘミングウェイが特集されてて、テンション上がったｗ
ご飯 台湾で食べたご飯の6割は魯肉飯（or 爌肉飯） + α だったかも。 おばちゃんと話して適当に相槌してたらでてきたので、料理名はちゃんと勉強しておけばよかった。
台南で食べた魚介スープは断トツでやばかった！たくさん汗をかいた体に染み渡りめちゃくちゃ美味しかったなー。 お店によって味は全然違ったので、最高のタイミングで至高のスープに出会えて本当によかった。
宿 ドミトリーに宿泊。英語話せるスタッフいたり、綺麗で飲み放題の水やコーヒーがあり、ウォシュレットもついていて快適だった。一方で、Wi-Fiは微妙なとこがあり、急に切断されたり、遅いとこもあった。
オフシーズンなのかどこの宿も空いてて、旅行者から面白い情報を仕入れることもほとんどなかったのはちょっと残念。
屋上で1人ビール飲んだり、南米に移住した女性と南米話に盛り上がったりと、「外国で飲む酒うめぇ」とか「あー旅っていいよなー」と思える瞬間があったので、外国にきてよかった。
空港 入国カードはオンライン申請しておくと記入の手間が省けて楽だったが、イミグレは行列で30分位待った ATMはそこかしこにあるので、出口付近の行列ができてるATMには並ばず、他のATMを探した方が早いかも NT$5000プレゼント抽選キャンペーンで電子マネー（Easy card）が当選した場合、専用のカードがもらえる 利用できるお店が少なく、交通とコンビニだけで使い切るのは短期旅行だと大変かも。鼎泰豊 復興店では使えました コンビニで販売しているAppleギフトカード類の購入には利用できず🙅‍♀️ eSIM Airaloを始めて使ってみたけど、めちゃくちゃ便利だった。 日本にいるときにアプリからeSIMを購入・セットアップして、台湾に到着したら切り替えるだけで使えた。 回線速度はあまり速くなく数Mbps?だった気がするので、速度を気にする人はUbigiのほうがいいらしい。
簡単にチャージできて好きなだけネットできる環境だと、ネット依存になりがちで、便利だったけどちょっともったいなかった感じも。
昔インド1人旅をした時は日本の図書館でデリーの中心街の地図とアグラの地図をコピーして、他の情報はない状態で放浪して、泊めてもらったり、騙されたり、ヴァラナシで泳いだり、沈没したり、波乱万丈だったけど、常時ネットにつながると適宜情報を見つけて、暇な時はネットサーフィンしたりで、安穏とした旅になるよなぁと。
インターネットのことを全然知らず、旅先で会った人にHotmailを教えてもらって「これでいつでも世界中の人と連絡とれるじゃん！」って感動して、怪しいネットカフェみたいなところで日本語が打てない環境でメールしてたのがめっちゃ懐かしいｗ
PC持って作業できるカフェ ググってでてくる評判のカフェは閉店していることが多く、安牌はチェーン店でした。コメダぁー！！
LOUISA COFFEE Mr. Brown Coffee コメダ珈琲 まとめ 空港で寝るような旅は体力的にきつかった 梅雨の季節はじめじめしてる 夜市でお酒販売してないのめっちゃ残念 台北はトイレやゴミ箱がたくさんあるが、地方行くと少ない 英語、日本語はほとんど通じない 日本のアニメや漫画、ひらがな、カタカナなどはよく見かけたり、日本語の曲が流れてるお店はいくつもあった 国家図書館は日本人でも入館証作って即日入館可 パスポート、Easy card、スマートフォン（QRコードスキャンして各種入力するので）必要 顔写真撮られる Easy cardが入館証になる 釣ったエビをくれるなど優しい人たくさん 塩焼きしてビール飲みながら食べたら最高だった！ 次はどこに行こっかなぁ〜。</description></item><item><title>RailsでCloud Visionのテキスト認識と顔検出</title><link>https://rono23.com/posts/2021-04-01/</link><pubDate>Thu, 01 Apr 2021 00:00:00 +0900</pubDate><guid>https://rono23.com/posts/2021-04-01/</guid><description>Quickstartsを参考にセットアップ後、サービスアカウントの秘密鍵ファイルを適当に設置（config/xxx.json）。
# Gemfile gem &amp;#39;google-cloud-vision&amp;#39; # config/initializers/cloud_vision.rb credentials = JSON.parse File.read(Rails.root.join(&amp;#39;config&amp;#39;, &amp;#39;xxx.json&amp;#39;)) Google::Cloud::Vision.configure do |config| config.credentials = credentials end viewに file_field :image みたいの書いてファイルをアップロードしてみる。
# controller image = File.binread(params[:image].tempfile) requests = [{ image: { content: image }, # image: { source: { image_uri: &amp;#39;https://example.com/image.png&amp;#39; } }, image_context: { language_hints: %w(ja) }, features: [ { type: :FACE_DETECTION }, { type: :TEXT_DETECTION } ] }] result = Google::Cloud::Vision.image_annotator.batch_annotate_images(requests: requests) 簡単！File.binread を知らなくて、ちょっとはまったけど… デモでどんな感じか試せるし、レスポンスのJSONも見れて便利だけど、日本語のテキスト検出を試したい場合はローカルで language_hints で ja を指定して試してみるのおすすめです。精度がちょっと上がりました。</description></item><item><title>PKCEのcode_challenge生成</title><link>https://rono23.com/posts/2021-01-15/</link><pubDate>Fri, 15 Jan 2021 00:00:00 +0900</pubDate><guid>https://rono23.com/posts/2021-01-15/</guid><description>code_verifier=dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk code_challenge=E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM https://tools.ietf.org/html/rfc7636
Swift
import CryptoKit let codeVerifier = &amp;#34;dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk&amp;#34; let data = Data(codeVerifier.utf8) let hash = SHA256.hash(data: data) let codeChallenge = Data(hash).base64EncodedString() .replacingOccurrences(of: &amp;#34;=&amp;#34;, with: &amp;#34;&amp;#34;) .replacingOccurrences(of: &amp;#34;+&amp;#34;, with: &amp;#34;-&amp;#34;) .replacingOccurrences(of: &amp;#34;/&amp;#34;, with: &amp;#34;_&amp;#34;) Ruby
require &amp;#39;base64&amp;#39; require &amp;#39;digest&amp;#39; code_verifier = &amp;#34;dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk&amp;#34; code_challenge = Base64.urlsafe_encode64(Digest::SHA256.digest(code_verifier), padding: false) 最初、ハッシュ値を文字列で扱って少しハマったけど CommonCrypto を使わずにできてよかった 🎉</description></item><item><title>React Native 実践本のメモ</title><link>https://rono23.com/posts/2020-05-23/</link><pubDate>Sat, 23 May 2020 00:00:00 +0900</pubDate><guid>https://rono23.com/posts/2020-05-23/</guid><description>React Native 〜 JavaScriptによるiOS／Androidアプリ開発の実践（GitHub）を読んで、0.62だと動かなかったので、取り急ぎその対応メモ。
Argument of type &amp;lsquo;string | ReactTestInstance&amp;rsquo; is not assignable to parameter of type &amp;lsquo;Pick&amp;lt;ReactTestInstanceExtended, &amp;quot;type&amp;quot; | &amp;quot;props&amp;quot; | &amp;quot;parent&amp;quot; | &amp;quot;children&amp;quot; | &amp;quot;find&amp;quot; | &amp;quot;findAll&amp;quot; | &amp;quot;getProp&amp;quot; | &amp;quot;parentNode&amp;quot;&amp;gt;&amp;rsquo;. Type &amp;lsquo;string&amp;rsquo; is not assignable to type &amp;lsquo;Pick&amp;lt;ReactTestInstanceExtended, &amp;quot;type&amp;quot; | &amp;quot;props&amp;quot; | &amp;quot;parent&amp;quot; | &amp;quot;children&amp;quot; | &amp;quot;find&amp;quot; | &amp;quot;findAll&amp;quot; | &amp;quot;getProp&amp;quot; | &amp;quot;parentNode&amp;quot;&amp;gt;&amp;rsquo;.
- fireEvent.press(container.children[0]); + fireEvent.press(container.children[0] as any); Error: expect(jest.fn()).toBeCalled() Expected number of calls: &amp;gt;= 1 Received number of calls: 0</description></item><item><title>Appleでサインインのアクセストークンとリフレッシュトークンの取得</title><link>https://rono23.com/posts/2020-02-19/</link><pubDate>Wed, 19 Feb 2020 00:00:00 +0900</pubDate><guid>https://rono23.com/posts/2020-02-19/</guid><description>Appleでサインインのトークン検証の続き。
セットアップ # Gemfile gem &amp;#34;jwt&amp;#34; # クライアントから送られてきたパラメータ code = &amp;#34;authorizationCode&amp;#34; # アプリのID（decoded_token[:aud]） client_id = &amp;#34;com.example.app&amp;#34; # https://developer.apple.com/account/#/membership team_id = &amp;#34;xxx&amp;#34; # https://developer.apple.com/account/resources/authkeys/list key_id = &amp;#34;xxx&amp;#34; key_file = File.read(Rails.root.join(&amp;#34;AuthKey_xxx.p8&amp;#34;)) key = OpenSSL::PKey::EC.new(key_file) access_token/refresh_token の取得 headers = { kid: key_id, alg: &amp;#34;ES256&amp;#34; } claims = { iss: team_id, sub: client_id, iat: Time.now.to_i, exp: Time.now.to_i + 1.day.to_i * 180, aud: &amp;#34;https://appleid.apple.com&amp;#34; } client_secret = JWT.encode claims, key, &amp;#34;ES256&amp;#34;, headers params = { client_id: client_id, client_secret: client_secret, code: code, grant_type: &amp;#34;authorization_code&amp;#34; } response = Net::HTTP.</description></item><item><title>Appleでサインインのトークン検証</title><link>https://rono23.com/posts/2020-02-12/</link><pubDate>Wed, 12 Feb 2020 00:00:00 +0900</pubDate><guid>https://rono23.com/posts/2020-02-12/</guid><description>セットアップ # Gemfile gem &amp;#34;jwt&amp;#34; # クライアントから送られてきたパラメータ token = &amp;#34;identityToken&amp;#34; code = &amp;#34;authorizationCode&amp;#34; 署名検証 url = &amp;#34;https://appleid.apple.com/auth/keys&amp;#34; jwks = JSON.parse(open(url).read, symbolize_names: true) algorithms = jwks[:keys].map { |key| key[:alg] } # or tokenのHeaderの:alg decoded_token = JWT.decode(token, nil, true, algorithms: algorithms, jwks: jwks).first.with_indifferent_access # 1つのJWKだけ検証したいとき jwk = jwks[:keys].first public_key = JWT::JWK.import(jwk).keypair.public_key # or `JWT::JWK::RSA.import(jwk).public_key` JWT.decode(token, public_key, true, algorithm: &amp;#34;RS256&amp;#34;) # 期限は10分なので注意 JWT.decode(...) #=&amp;gt; JWT::ExpiredSignature: Signature has expired authorizationCodeの検証 # https://openid.net/specs/openid-connect-core-1_0.html#CodeValidation digest = Digest::SHA256.</description></item><item><title>fastlaneのadd_badgeで数字が潰れる</title><link>https://rono23.com/posts/2019-08-22/</link><pubDate>Thu, 22 Aug 2019 00:00:00 +0900</pubDate><guid>https://rono23.com/posts/2019-08-22/</guid><description>アプリのアイコンにビルド番号などを追加してたけど、その数字が潰れる問題が発生。 pango 1.42.4 だとOKとコメントがあったので、取り急ぎ古いバージョンをインストールして対処できた。
cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula ## You need to fetch when commit log was grafted # git log pango.rb # git fetch --depth 50000 git checkout a8ac7ea5fe9339558c9fbe49acaa1a2452bcd4d0 pango.rb brew reinstall pango brew pin pango git reset --hard brew list --versions | grep pango #=&amp;gt; pango 1.42.4_2 pin したので、対応されたら unpin して更新すればOK。
brew unpin pango 追記：もっと簡単なやり方がコメントされてました。</description></item><item><title>TestFlightのテスト内容の必須文字数が変更</title><link>https://rono23.com/posts/2019-07-22/</link><pubDate>Mon, 22 Jul 2019 00:00:00 +0900</pubDate><guid>https://rono23.com/posts/2019-07-22/</guid><description>Spaceship::UnexpectedResponse: [!] An attribute value has text that is too short. - Text for whatsNew is too short.
Bitrise上で少し前からエラーが発生するようになって調べてみたら、TestFlightのテスト内容の必須文字数が変更になったっぽい 🤔
テスト内容は4文字以上でなければなりません。
App Store Connect &amp;gt; TestFlight &amp;gt; アプリ選択 &amp;gt; テストの詳細 で テスト内容 を9文字以下で保存するとエラー（5文字以上でも同じエラーメッセージ…）。
# Fastlane - pilot(changelog: &amp;#34;9文字以下&amp;#34;, ...) + pilot(changelog: &amp;#34;10文字以上のテキスト&amp;#34;, ...) 10文字以上に変更したら 🙆🎉
最近、月1でBitrise or Fastlaneで躓いてる気がする… 😭</description></item><item><title>2019年上半期に読んで面白かった本</title><link>https://rono23.com/posts/2019-06-29/</link><pubDate>Sat, 29 Jun 2019 00:00:00 +0900</pubDate><guid>https://rono23.com/posts/2019-06-29/</guid><description>小説 ストーナー（ジョン・ウィリアムズ、東江一紀訳） 助教授として生きた男性の一生を過不足なく描き、素晴らしかった。たぶん今年1番の小説かも マーティン・イーデン（ジャック・ロンドン、辻井栄滋訳） 船乗りから小説家へ。労働者階級、ブルジョワ、哲学などなかなか激しかった。少し冗長的なところもあるけど、こちらも素晴らしかった ジェイン・エア（シャーロット・ブロンテ、河島弘美訳） 女性の激動の一生。当時の貴族や宗教観を小説越しに見るの好きだなー 他にもジョン・アップダイクやジョン・チーヴァーなど、今年初めて読んだ作家さんが多かった。 ジョン・チーヴァーよりもレイモンド・カーヴァーのほうが好きなことがわかったけど、たぶん陰鬱の表現の差かなと思った。
技術書 OAuth徹底入門 曖昧だったので色々と勉強になった Web API The Good Parts 目新しいことはなかったけど、わかりやすくまとまっていてよかった Swift実践入門 今年に入ってから少しずつ書いてるけどなかなか慣れない iOS周りは勉強時間やコードを書いた時間が少なかったので、下半期はもっとコード書こ。
その他 NO HARD WORK! 相変わらずのBasecamp節！ 「エンタメ」の夜明け ディズニーを誘致した話で、当時のビジネスが垣間見れて楽しかった。この本自体もエンタメやね 上半期は約30冊（漫画除く）しか読めなかったけど、あまりハズレが無かった印象。 定期的にブログを書いていこうと思ったけど、書くのに慣れていないので難しい…</description></item><item><title>Capybara WebkitからHeadless Chromeに移行</title><link>https://rono23.com/posts/2017-09-11/</link><pubDate>Mon, 11 Sep 2017 00:00:00 +0900</pubDate><guid>https://rono23.com/posts/2017-09-11/</guid><description>インストール
# Gemfile group :test do gem &amp;#39;selenium-webdriver&amp;#39; gem &amp;#39;chromedriver-helper&amp;#39; ... end chromedriver は brew install chromedriver するか、上記のようにgemでインストールすると楽だけど、gemの場合、アップデートについて少し念頭に入れておいたほうがいいかも。 CircleCIだとimageに circleci/ruby:2.4.1-node-browsers を指定していれば chromedriver とか色々と入れてくれて、特に設定等しなくても動く。
設定
# spec/rails_helper.rb require &amp;#39;selenium/webdriver&amp;#39; ... Capybara.register_driver :headless_chrome do |app| capabilities = Selenium::WebDriver::Remote::Capabilities.chrome( chromeOptions: { args: %w(headless disable-gpu window-size=1280,800) } ) Capybara::Selenium::Driver.new app, browser: :chrome, desired_capabilities: capabilities end Capybara.javascript_driver = :headless_chrome 修正が必要だったのは trigger, alert, drag_to 周りで、最新のバージョンだと save_and_open_screenshot も正常に動作しました。
Versions
/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version Google Chrome 61.0.3163.79 chromedriver -v ChromeDriver 2.</description></item><item><title>Webpackerで入れたVueにESLintを使う</title><link>https://rono23.com/posts/2017-09-08/</link><pubDate>Fri, 08 Sep 2017 00:00:00 +0900</pubDate><guid>https://rono23.com/posts/2017-09-08/</guid><description>インストール
yarn add --dev eslint eslint-loader eslint-plugin-import eslint-config-airbnb-base eslint-plugin-vue@beta 設定
// .eslintrc { env: { browser: true }, &amp;#39;extends&amp;#39;: [ &amp;#39;airbnb-base&amp;#39;, &amp;#39;plugin:vue/recommended&amp;#39; ] } // config/webpack/development.js const environment = require(&amp;#39;./environment&amp;#39;) environment.loaders.set(&amp;#39;eslint&amp;#39;, { test: /\.(js|vue)$/, loader: &amp;#39;eslint-loader&amp;#39;, enforce: &amp;#39;pre&amp;#39;, options: { failOnWarning: true } }) module.exports = environment.toWebpackConfig() options の設定は公式を参考に、例えば failOnWarning: true だとbuildに失敗してコンソールやログにエラーが表示されて、 failOnWarning: false にするとbuildはとおってログにだけメッセージが残る。</description></item><item><title>Google Domainsに移管してみた</title><link>https://rono23.com/posts/2017-09-07/</link><pubDate>Thu, 07 Sep 2017 00:00:00 +0900</pubDate><guid>https://rono23.com/posts/2017-09-07/</guid><description>ムームードメインからGoogle Domainsにドメインを移管してみたけど、申請から完了まで90分位でできた。
ムームードメインで、WHOIS情報を自身のに変更 ムームードメインで、「ドメイン操作」 &amp;gt; 「ドメイン一覧」 &amp;gt; ドメインをクリックして、認証コードをメモ Google Domainsのドメインの移管から、ドメインを入力して申請 Googleから移管確認のメールが来るのでOKする ムームードメインから移管申請確認メールが来るのでOKする Google Domains のネームサーバーを使用するようにして、レコード周りを追加 メールの送受信について Google Domains のネームサーバーを利用していると、メール エイリアスを作成して転送できるので便利。 例えば hello@rono23.com を rono23@gmail.com に転送できるので、メールの受信は簡単。
一方で、メールの送信は、
送信したいGmailアカウントで、2段階認証を有効にする アプリ パスワード &amp;gt; 「アプリを選択」 &amp;gt; 「その他（名前を入力）」 &amp;gt; 好きな名前を入力（例: rono23.com） &amp;gt; パスワードをメモ Gmail &amp;gt; 「設定」 &amp;gt; 「アカウントとインポート」 &amp;gt; 「他のメール アドレスを追加」 &amp;gt; 名前、メールアドレスを入力 &amp;gt; 下記入力 SMTP サーバー ポート ユーザー名 パスワード smtp.gmail.com 465 ログインしているGmailアカウント（メールアドレス） 2. のパスワード ※ メール転送の「転送されたメールアドレスからメールを送信するには」参照
感想・備忘録 .jp ドメインの購入や移管はまだ非対応 平日の午前中に移管したので、休日や深夜だともっと時間かかるかも ムームードメインのアカウントが不要になったので、管理するアカウントが1つ減って嬉しい ドメイン代はちょっと高い。例えば .com は、ムームードメインやお名前.comは1,040円、Google Domainsは1,400円 Google Domainsを日本語で使っていたら、コンソールにローカライズエラーがでて動かなくなったけど、英語に切り替えたら直った</description></item><item><title>Upgrading to Rails 5</title><link>https://rono23.com/posts/2016-07-02/</link><pubDate>Sat, 02 Jul 2016 00:00:00 +0900</pubDate><guid>https://rono23.com/posts/2016-07-02/</guid><description>There are lots of changes, so I just picked up some here.
ActiveRecord belongs_to required by default.
# config/initializers/new_framework_defaults.rb Rails.application.config.active_record.belongs_to_required_by_default = true # app/models/post.rb - belongs_to :user, required: true + belongs_to :user But you need to care about it because of other gems. It sometimes doesn&amp;rsquo;t work if one of gems is using a hook like ActiveRecord::Base.extend, ActiveRecord::Base.send :include etc intead of ActiveSupport.on_load(:active_record). #rails/rails#23589
ActionMailer Change your mailers to inherit from your new ApplicationMailer.</description></item><item><title>Upgrading to Middleman 4</title><link>https://rono23.com/posts/2016-06-29/</link><pubDate>Wed, 29 Jun 2016 00:00:00 +0900</pubDate><guid>https://rono23.com/posts/2016-06-29/</guid><description>Global variable # config.rb set :site_title, &amp;#39;rono23&amp;#39; # before site_title # after config.site_title Template local variable # before data.page.title # after current_resource.data.title Deployment # Gemfile gem &amp;#39;middleman-deploy&amp;#39;, &amp;#39;~&amp;gt; 2.0.0.pre.alpha&amp;#39; # before activate :deploy do |deploy| deploy.method = :git deploy.branch = &amp;#39;master&amp;#39; end # after activate :deploy do |deploy| deploy.deploy_method = :git deploy.branch = &amp;#39;master&amp;#39; end Related: Middleman: Upgrading to v4</description></item><item><title>Github Pages x Middleman</title><link>https://rono23.com/posts/2015-04-20/</link><pubDate>Mon, 20 Apr 2015 00:00:00 +0900</pubDate><guid>https://rono23.com/posts/2015-04-20/</guid><description>It&amp;rsquo;s awesome! I just created 2 branches on Github and configured an A record.
Branches master: static contents for Github pages develop: original contents with Middleman Deploy $ bundle exec middleman build $ bundle exec middleman deploy It&amp;rsquo;s really easy to post articles using markdown and deploy :) The one thing that I don&amp;rsquo;t like is there is always a slash at the end of url like /posts/github-pages-x-middleman/ :( I can remove it when I use .</description></item></channel></rss>