<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rails on rono23</title><link>https://rono23.com/tags/rails/</link><description>Recent content in Rails on rono23</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 01 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://rono23.com/tags/rails/index.xml" rel="self" type="application/rss+xml"/><item><title>RailsでCloud Visionのテキスト認識と顔検出</title><link>https://rono23.com/posts/2021-04-01/</link><pubDate>Thu, 01 Apr 2021 00:00:00 +0000</pubDate><guid>https://rono23.com/posts/2021-04-01/</guid><description>Quickstartsを参考にセットアップ後、サービスアカウントの秘密鍵ファイルを適当に設置（config/xxx.json）。
# Gemfile gem &amp;#39;google-cloud-vision&amp;#39; # config/initializers/cloud_vision.rb credentials = JSON.parse File.read(Rails.root.join(&amp;#39;config&amp;#39;, &amp;#39;xxx.json&amp;#39;)) Google::Cloud::Vision.configure do |config| config.credentials = credentials end viewに file_field :image みたいの書いてファイルをアップロードしてみる。
# controller image = File.binread(params[:image].tempfile) requests = [{ image: { content: image }, # image: { source: { image_uri: &amp;#39;https://example.com/image.png&amp;#39; } }, image_context: { language_hints: %w(ja) }, features: [ { type: :FACE_DETECTION }, { type: :TEXT_DETECTION } ] }] result = Google::Cloud::Vision.image_annotator.batch_annotate_images(requests: requests) 簡単！File.binread を知らなくて、ちょっとはまったけど… デモでどんな感じか試せるし、レスポンスのJSONも見れて便利だけど、日本語のテキスト検出を試したい場合はローカルで language_hints で ja を指定して試してみるのおすすめです。精度がちょっと上がりました。</description></item><item><title>Capybara WebkitからHeadless Chromeに移行</title><link>https://rono23.com/posts/2017-09-11/</link><pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate><guid>https://rono23.com/posts/2017-09-11/</guid><description>インストール
# Gemfile group :test do gem &amp;#39;selenium-webdriver&amp;#39; gem &amp;#39;chromedriver-helper&amp;#39; ... end chromedriver は brew install chromedriver するか、上記のようにgemでインストールすると楽だけど、gemの場合、アップデートについて少し念頭に入れておいたほうがいいかも。 CircleCIだとimageに circleci/ruby:2.4.1-node-browsers を指定していれば chromedriver とか色々と入れてくれて、特に設定等しなくても動く。
設定
# spec/rails_helper.rb require &amp;#39;selenium/webdriver&amp;#39; ... Capybara.register_driver :headless_chrome do |app| capabilities = Selenium::WebDriver::Remote::Capabilities.chrome( chromeOptions: { args: %w(headless disable-gpu window-size=1280,800) } ) Capybara::Selenium::Driver.new app, browser: :chrome, desired_capabilities: capabilities end Capybara.javascript_driver = :headless_chrome 修正が必要だったのは trigger, alert, drag_to 周りで、最新のバージョンだと save_and_open_screenshot も正常に動作しました。
Versions
/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version Google Chrome 61.0.3163.79 chromedriver -v ChromeDriver 2.</description></item><item><title>Webpackerで入れたVueにESLintを使う</title><link>https://rono23.com/posts/2017-09-08/</link><pubDate>Fri, 08 Sep 2017 00:00:00 +0000</pubDate><guid>https://rono23.com/posts/2017-09-08/</guid><description>インストール
yarn add --dev eslint eslint-loader eslint-plugin-import eslint-config-airbnb-base eslint-plugin-vue@beta 設定
// .eslintrc { env: { browser: true }, &amp;#39;extends&amp;#39;: [ &amp;#39;airbnb-base&amp;#39;, &amp;#39;plugin:vue/recommended&amp;#39; ] } // config/webpack/development.js const environment = require(&amp;#39;./environment&amp;#39;) environment.loaders.set(&amp;#39;eslint&amp;#39;, { test: /\.(js|vue)$/, loader: &amp;#39;eslint-loader&amp;#39;, enforce: &amp;#39;pre&amp;#39;, options: { failOnWarning: true } }) module.exports = environment.toWebpackConfig() options の設定は公式を参考に、例えば failOnWarning: true だとbuildに失敗してコンソールやログにエラーが表示されて、 failOnWarning: false にするとbuildはとおってログにだけメッセージが残る。</description></item><item><title>Upgrading to Rails 5</title><link>https://rono23.com/posts/2016-07-02/</link><pubDate>Sat, 02 Jul 2016 00:00:00 +0000</pubDate><guid>https://rono23.com/posts/2016-07-02/</guid><description>There are lots of changes, so I just picked up some here.
ActiveRecord belongs_to required by default.
# config/initializers/new_framework_defaults.rb Rails.application.config.active_record.belongs_to_required_by_default = true # app/models/post.rb - belongs_to :user, required: true + belongs_to :user But you need to care about it because of other gems. It sometimes doesn&amp;rsquo;t work if one of gems is using a hook like ActiveRecord::Base.extend, ActiveRecord::Base.send :include etc intead of ActiveSupport.on_load(:active_record). #rails/rails#23589
ActionMailer Change your mailers to inherit from your new ApplicationMailer.</description></item></channel></rss>