<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rono23</title>
  <id>https://rono23.com/posts</id>
  <link href="https://rono23.com/posts"/>
  <link href="https://rono23.com/posts/feed.xml" rel="self"/>
  <updated>2021-04-01T00:00:00+09:00</updated>
  <author>
    <name>rono23</name>
  </author>
  <entry>
    <title>RailsでCloud Visionのテキスト認識と顔検出</title>
    <link rel="alternate" href="https://rono23.com/posts/cloud-vision-on-rails/"/>
    <id>https://rono23.com/posts/cloud-vision-on-rails/</id>
    <published>2021-04-01T00:00:00+09:00</published>
    <updated>2021-04-02T08:38:57+09:00</updated>
    <author>
      <name>rono23</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://cloud.google.com/vision/docs/quickstarts"&gt;Quickstarts&lt;/a&gt;を参考にセットアップ後、サービスアカウントの秘密鍵ファイルを適当に設置（&lt;code&gt;config/xxx.json&lt;/code&gt;）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Gemfile
gem &amp;#39;google-cloud-vision&amp;#39;

# config/initializers/cloud_vision.rb
credentials = JSON.parse File.read(Rails.root.join(&amp;#39;config&amp;#39;, &amp;#39;xxx.json&amp;#39;))
Google::Cloud::Vision.configure do |config|
  config.credentials = credentials
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;viewに &lt;code&gt;file_field :image&lt;/code&gt; みたいの書いてファイルをアップロードしてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# controller
image = File.binread(params[:image].tempfile)

requests = [{
  image: { content: image },
  # image: { source: { image_uri: &amp;#39;https://example.com/image.png&amp;#39; } },
  image_context: { language_hints: %w(ja) },
  features: [
    { type: :FACE_DETECTION },
    { type: :TEXT_DETECTION }
  ]
}]

result = Google::Cloud::Vision.image_annotator.batch_annotate_images(requests: requests)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;簡単！&lt;code&gt;File.binread&lt;/code&gt; を知らなくて、ちょっとはまったけど…&lt;br&gt;
&lt;a href="https://cloud.google.com/vision/docs/drag-and-drop"&gt;デモ&lt;/a&gt;でどんな感じか試せるし、レスポンスのJSONも見れて便利だけど、日本語のテキスト検出を試したい場合はローカルで &lt;code&gt;language_hints&lt;/code&gt; で &lt;code&gt;ja&lt;/code&gt; を指定して試してみるのおすすめです。精度がちょっと上がりました。&lt;/p&gt;

&lt;h2&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/vision/docs/drag-and-drop"&gt;Try it! | Cloud Vision API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/vision/docs/features-list"&gt;Features list | Cloud Vision API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/vision/docs/reference/rest/v1/Feature#type"&gt;Feature | Cloud Vision API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://googleapis.dev/ruby/google-cloud-vision-v1/latest/Google/Cloud/Vision/V1.html"&gt;Module: Google::Cloud::Vision::V1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/jp/rekognition/"&gt;Amazon Rekognition&lt;/a&gt;は日本語のテキスト検出がまだサポートされてなかったので今回見送ったけど、サポートされたら試してみたい。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>PKCEのcode_challenge生成</title>
    <link rel="alternate" href="https://rono23.com/posts/pkec-code-challenge/"/>
    <id>https://rono23.com/posts/pkec-code-challenge/</id>
    <published>2021-01-15T00:00:00+09:00</published>
    <updated>2021-04-01T21:04:51+09:00</updated>
    <author>
      <name>rono23</name>
    </author>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;code_verifier=dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk&lt;br&gt;
code_challenge=E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM&lt;br&gt;
&lt;a href="https://tools.ietf.org/html/rfc7636"&gt;https://tools.ietf.org/html/rfc7636&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Swift&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import CryptoKit

let codeVerifier = &amp;quot;dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk&amp;quot;
let data = Data(codeVerifier.utf8)
let hash = SHA256.hash(data: data)
let codeChallenge = Data(hash).base64EncodedString()
    .replacingOccurrences(of: &amp;quot;=&amp;quot;, with: &amp;quot;&amp;quot;)
    .replacingOccurrences(of: &amp;quot;+&amp;quot;, with: &amp;quot;-&amp;quot;)
    .replacingOccurrences(of: &amp;quot;/&amp;quot;, with: &amp;quot;_&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &amp;#39;base64&amp;#39;
require &amp;#39;openssl&amp;#39;

code_verifier = &amp;quot;dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk&amp;quot;
code_challenge = Base64.urlsafe_encode64(OpenSSL::Digest::SHA256.digest(code_verifier), padding: false)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;p&gt;最初、&lt;a href="https://www.hackingwithswift.com/example-code/cryptokit/how-to-calculate-the-sha-hash-of-a-string-or-data-instance"&gt;ハッシュ値を文字列&lt;/a&gt;で扱って少しハマったけど &lt;code&gt;CommonCrypto&lt;/code&gt; を使わずにできてよかった 🎉&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>React Native 実践本のメモ</title>
    <link rel="alternate" href="https://rono23.com/posts/react-native-book-fixes/"/>
    <id>https://rono23.com/posts/react-native-book-fixes/</id>
    <published>2020-05-23T00:00:00+09:00</published>
    <updated>2020-05-23T21:15:05+09:00</updated>
    <author>
      <name>rono23</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://www.amazon.co.jp/dp/B088BLSH9V/"&gt;React Native 〜 JavaScriptによるiOS／Androidアプリ開発の実践&lt;/a&gt;（&lt;a href="https://github.com/react-native-jp/praiser"&gt;GitHub&lt;/a&gt;）を読んで、0.62だと動かなかったので、取り急ぎその対応メモ。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Argument of type &amp;#39;string | ReactTestInstance&amp;#39; is not assignable to parameter of type &amp;#39;Pick&lt;ReactTestInstanceExtended, \"type\" | \"props\" | \"parent\" | \"children\" | \"find\" | \"findAll\" | \"getProp\" | \"parentNode\"&gt;&amp;#39;. Type &amp;#39;string&amp;#39; is not assignable to type &amp;#39;Pick&lt;ReactTestInstanceExtended, \"type\" | \"props\" | \"parent\" | \"children\" | \"find\" | \"findAll\" | \"getProp\" | \"parentNode\"&gt;&amp;#39;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;- fireEvent.press(container.children[0]);
+ fireEvent.press(container.children[0] as any);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Error: expect(jest.fn()).toBeCalled() Expected number of calls: &amp;gt;= 1 Received number of calls: 0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;# https://github.com/facebook/react-native/issues/27721
# package.json
jest: {
  &amp;quot;setupFilesAfterEnv&amp;quot;: [&amp;quot;./jest.setup.js&amp;quot;],
}

# jest.setup.js
jest.mock(&amp;#39;react-native/Libraries/Components/Touchable/TouchableOpacity&amp;#39;, () =&amp;gt; &amp;#39;TouchableOpacity&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;No overload matches this call. Overload 1 of 2, &amp;#39;(props: Pick&lt;Pick&lt;ViewProps &amp; RefAttributes&lt;View&gt; &amp;amp; { children: ReactNode; style?: StyleProp&lt;ViewStyle&gt;; theme: Theme; }, \&amp;quot;style\&amp;quot; | ... 52 more ... | \&amp;quot;onTouchEndCapture\&amp;quot;&amp;gt; &amp;amp; { ...; } &amp;amp; { ...; } &amp;amp; { ...; }, \&amp;quot;onPress\&amp;quot; | ... 63 more ... | \&amp;quot;contentStyle\&amp;quot;&amp;gt; &amp;amp; { ...; }, context?: any): ReactElement&amp;lt;...&amp;gt; | ... 1 more ... | null&amp;#39;, gave the following error. Property &amp;#39;accessibilityStates&amp;#39; is missing in type &amp;#39;{ children: \&amp;quot;\&amp;quot; | Element | undefined; accessibilityLabel: string; icon: string; mode: \&amp;quot;contained\&amp;quot;; onPress: () =&amp;gt; void; }&amp;#39; but required in type &amp;#39;Pick&lt;Pick&lt;ViewProps &amp; RefAttributes&lt;View&gt; &amp;amp; { children: ReactNode; style?: StyleProp&lt;ViewStyle&gt;; theme: Theme; }, \&amp;quot;style\&amp;quot; | ...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;# https://www.npmjs.com/package/patch-package
# https://github.com/callstack/react-native-paper/issues/1920
yarn add patch-package postinstall-postinstall
vim node_modules/@types/react-native/index.d.ts

# `accessibilityState?: AccessibilityState;` の下に追加
accessibilityStates?: any; 

yarn patch-package @types/react-native
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;p&gt;React、React Native、TypeScript初心者なので、色々とはまる 🤣&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Appleでサインインのアクセストークンとリフレッシュトークンの取得</title>
    <link rel="alternate" href="https://rono23.com/posts/sign-in-with-apple-tokens/"/>
    <id>https://rono23.com/posts/sign-in-with-apple-tokens/</id>
    <published>2020-02-19T00:00:00+09:00</published>
    <updated>2020-02-24T19:47:57+09:00</updated>
    <author>
      <name>rono23</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="/posts/verify-sign-in-with-apple-token/"&gt;Appleでサインインのトークン検証&lt;/a&gt;の続き。&lt;/p&gt;

&lt;h4&gt;セットアップ&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# Gemfile
gem &amp;quot;jwt&amp;quot;

# クライアントから送られてきたパラメータ
code = &amp;quot;authorizationCode&amp;quot;

# アプリのID（decoded_token[:aud]）
client_id = &amp;quot;com.example.app&amp;quot;

# https://developer.apple.com/account/#/membership
team_id = &amp;quot;xxx&amp;quot;

# https://developer.apple.com/account/resources/authkeys/list
key_id = &amp;quot;xxx&amp;quot;
key_file = File.read(Rails.root.join(&amp;quot;AuthKey_xxx.p8&amp;quot;))
key = OpenSSL::PKey::EC.new(key_file)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;&lt;code&gt;access_token/refresh_token&lt;/code&gt; の取得&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;headers = {
  kid: key_id,
  alg: &amp;quot;ES256&amp;quot;
}
claims = {
  iss: team_id,
  sub: client_id,
  iat: Time.now.to_i,
  exp: Time.now.to_i + 1.day.to_i * 180,
  aud: &amp;quot;https://appleid.apple.com&amp;quot;
}
client_secret = JWT.encode claims, key, &amp;quot;ES256&amp;quot;, headers
params = {
  client_id: client_id,
  client_secret: client_secret,
  code: code,
  grant_type: &amp;quot;authorization_code&amp;quot;
}
response = Net::HTTP.post_form(URI.parse(&amp;quot;https://appleid.apple.com/auth/token&amp;quot;), params)
json = JSON.parse(response.body, symbolize_names: true)
#=&amp;gt; {:access_token=&amp;gt;&amp;quot;xxx&amp;quot;, :token_type=&amp;gt;&amp;quot;Bearer&amp;quot;, :expires_in=&amp;gt;3600, :refresh_token=&amp;gt;&amp;quot;xxx&amp;quot;, :id_token=&amp;gt;&amp;quot;xxx&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;&lt;code&gt;refresh_token&lt;/code&gt; を利用して &lt;code&gt;access_token&lt;/code&gt; を取得&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;params = {
  client_id: client_id,
  client_secret: client_secret,
  refresh_token: json[:refresh_token],
  grant_type: &amp;quot;refresh_token&amp;quot;
}
response = Net::HTTP.post_form(URI.parse(&amp;quot;https://appleid.apple.com/auth/token&amp;quot;), params)
json = JSON.parse(response.body, symbolize_names: true)
#=&amp;gt; {:access_token=&amp;gt;&amp;quot;xxx&amp;quot;, :token_type=&amp;gt;&amp;quot;Bearer&amp;quot;, :expires_in=&amp;gt;3600}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;リンク&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/documentation/signinwithapplerestapi/generate_and_validate_tokens"&gt;Generate and validate tokens - Sign in with Apple REST API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/documentation/signinwithapplerestapi/tokenresponse"&gt;TokenResponse - Sign in with Apple REST API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/documentation/signinwithapplerestapi/errorresponse"&gt;ErrorResponse - Sign in with Apple REST API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Appleでサインインのトークン検証</title>
    <link rel="alternate" href="https://rono23.com/posts/verify-sign-in-with-apple-token/"/>
    <id>https://rono23.com/posts/verify-sign-in-with-apple-token/</id>
    <published>2020-02-12T00:00:00+09:00</published>
    <updated>2020-02-24T19:47:57+09:00</updated>
    <author>
      <name>rono23</name>
    </author>
    <content type="html">&lt;h4&gt;セットアップ&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# Gemfile
gem &amp;quot;jwt&amp;quot;

# クライアントから送られてきたパラメータ
token = &amp;quot;identityToken&amp;quot;
code = &amp;quot;authorizationCode&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;署名検証&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;url = &amp;quot;https://appleid.apple.com/auth/keys&amp;quot;
jwks = JSON.parse(open(url).read, symbolize_names: true)
algorithms = jwks[:keys].map { |key| key[:alg] } # or tokenのHeaderの:alg
decoded_token = JWT.decode(token, nil, true, algorithms: algorithms, jwks: jwks).first.with_indifferent_access

# 1つのJWKだけ検証したいとき
jwk = jwks[:keys].first
public_key = JWT::JWK.import(jwk).keypair.public_key # or `JWT::JWK::RSA.import(jwk).public_key`
JWT.decode(token, public_key, true, algorithm: &amp;quot;RS256&amp;quot;)

# 期限は10分なので注意
JWT.decode(...) #=&amp;gt; JWT::ExpiredSignature: Signature has expired
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;authorizationCodeの検証&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# https://openid.net/specs/openid-connect-core-1_0.html#CodeValidation
digest = Digest::SHA256.digest(code)
c_hash = Base64.urlsafe_encode64(digest[0, digest.size/2], padding: false)
decoded_token[:c_hash] == c_hash
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;nonceの検証&lt;/h4&gt;

&lt;p&gt;クライアントの実装は&lt;a href="https://github.com/firebase/quickstart-ios/blob/112bdec24e30b333a14ca72b5976afe3d765e1b1/authentication/AuthenticationExampleSwift/MainViewController.swift#L816"&gt;firebase/quickstart-ios&lt;/a&gt;が参考になるかも。&lt;br&gt;
iOS 13から&lt;a href="https://developer.apple.com/documentation/cryptokit"&gt;CryptoKit&lt;/a&gt;が導入されたので、quickstart-ios的なnonceの生成は以下みたいな感じでもOKかな 🤔&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# クライアント
import CryptoKit

let uuid = CFUUIDCreateString(nil, CFUUIDCreate(nil))!
let rawNonce = NSString(string: uuid).replacingOccurrences(of: &amp;quot;-&amp;quot;, with: &amp;quot;&amp;quot;)
let data = rawNonce.data(using: .utf8)!
request.nonce = SHA256.hash(data: data).compactMap { String(format: &amp;quot;%02x&amp;quot;, $0) }.joined()

# サーバー
decoded_token[:nonce] == Digest::SHA256.hexdigest(rawNonce)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;iOS 12以下をサポートしている場合、&lt;a href="https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPFrameworks/Concepts/WeakLinking.html#//apple_ref/doc/uid/20002378-107026"&gt;weak link&lt;/a&gt;する必要があるので忘れずに。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Targets &amp;gt; APP &amp;gt; Build Settings &amp;gt; Other Linker Flags に &lt;code&gt;-weak_framework CryptoKit&lt;/code&gt; を追加&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;リンク&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://openid-foundation-japan.github.io/draft-ietf-oauth-json-web-token-11.ja.html"&gt;JSON Web Token (JWT)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openid-foundation-japan.github.io/draft-ietf-jose-json-web-signature-14.ja.html#kidDef"&gt;JSON Web Signature (JWS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openid-foundation-japan.github.io/rfc7517.ja.html#kidDef"&gt;JSON Web Key (JWK)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jwt/ruby-jwt"&gt;jwt/ruby-jwt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/documentation/signinwithapplerestapi"&gt;Sign in with Apple REST API | Apple Developer Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;➡️ &lt;a href="/posts/sign-in-with-apple-tokens"&gt;Appleでサインインのアクセストークンとリフレッシュトークンの取得&lt;/a&gt;に続く&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>fastlaneのadd_badgeで数字が潰れる</title>
    <link rel="alternate" href="https://rono23.com/posts/shrunk-badge/"/>
    <id>https://rono23.com/posts/shrunk-badge/</id>
    <published>2019-08-22T00:00:00+09:00</published>
    <updated>2020-02-12T09:56:41+09:00</updated>
    <author>
      <name>rono23</name>
    </author>
    <content type="html">&lt;p&gt;アプリのアイコンにビルド番号などを追加してたけど、その数字が&lt;a href="https://github.com/HazAT/badge/issues/91"&gt;潰れる問題&lt;/a&gt;が発生。&lt;br&gt;
&lt;code&gt;pango 1.42.4&lt;/code&gt; だとOKとコメントがあったので、取り急ぎ古いバージョンをインストールして対処できた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula

## You need to fetch when commit log was grafted
# git log pango.rb
# git fetch --depth 50000

git checkout a8ac7ea5fe9339558c9fbe49acaa1a2452bcd4d0 pango.rb
brew reinstall pango
brew pin pango
git reset --hard
brew list --versions | grep pango #=&amp;gt; pango 1.42.4_2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pin&lt;/code&gt; したので、対応されたら &lt;code&gt;unpin&lt;/code&gt; して更新すればOK。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew unpin pango
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;追記：もっと簡単なやり方が&lt;a href="https://github.com/HazAT/badge/issues/91#issuecomment-534866597"&gt;コメント&lt;/a&gt;されてました。&lt;/p&gt;
</content>
  </entry>
</feed>
