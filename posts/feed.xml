<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rono23</title>
  <id>https://rono23.com/posts</id>
  <link href="https://rono23.com/posts"/>
  <link href="https://rono23.com/posts/feed.xml" rel="self"/>
  <updated>2020-02-12T00:00:00+09:00</updated>
  <author>
    <name>rono23</name>
  </author>
  <entry>
    <title>Appleでサインインのトークン検証</title>
    <link rel="alternate" href="https://rono23.com/posts/verify-sign-in-with-apple-token/"/>
    <id>https://rono23.com/posts/verify-sign-in-with-apple-token/</id>
    <published>2020-02-12T00:00:00+09:00</published>
    <updated>2020-02-12T22:42:24+09:00</updated>
    <author>
      <name>rono23</name>
    </author>
    <content type="html">&lt;h4&gt;セットアップ&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# Gemfile
gem &amp;#39;jwt&amp;#39;

# クライアントから送られてきたパラメータ
token = &amp;#39;identityToken&amp;#39;
code = &amp;quot;authorizationCode&amp;#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;署名検証&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;url = &amp;quot;https://appleid.apple.com/auth/keys&amp;quot;
jwks = JSON.parse(open(url).read, symbolize_names: true)
algorithms = jwks[:keys].map { |key| key[:alg] } # or tokenのHeaderの:alg
decoded_token = JWT.decode(token, nil, true, algorithms: algorithms, jwks: jwks)

# 1つのJWKだけ検証したいとき
jwk = jwks[:keys].first
public_key = JWT::JWK.import(jwk).keypair.public_key # or `JWT::JWK::RSA.import(jwk).public_key`
decoded_token = JWT.decode(token, public_key, true, algorithm: &amp;quot;RS256&amp;quot;)

# 期限は10分なので注意
JWT.decode(...) #=&amp;gt; JWT::ExpiredSignature: Signature has expired
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;authorizationCodeの検証&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# https://openid.net/specs/openid-connect-core-1_0.html#CodeValidation
digest = Digest::SHA256.digest(code)
c_hash = Base64.urlsafe_encode64(digest[0, digest.size/2], padding: false)
decoded_token[0][&amp;quot;c_hash&amp;quot;] == c_hash
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;nonceの検証&lt;/h4&gt;

&lt;p&gt;クライアントの実装は&lt;a href="https://github.com/firebase/quickstart-ios/blob/112bdec24e30b333a14ca72b5976afe3d765e1b1/authentication/AuthenticationExampleSwift/MainViewController.swift#L816"&gt;firebase/quickstart-ios&lt;/a&gt;が参考になるかも。&lt;br&gt;
iOS 13から&lt;a href="https://developer.apple.com/documentation/cryptokit"&gt;CryptoKit&lt;/a&gt;が導入されたので、quickstart-ios的なnonceの生成は以下みたいな感じでもOKかな 🤔&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# クライアント
import CryptoKit

let uuid = CFUUIDCreateString(nil, CFUUIDCreate(nil))!
let rawNonce = NSString(string: uuid).replacingOccurrences(of: &amp;quot;-&amp;quot;, with: &amp;quot;&amp;quot;)
let data = rawNonce.data(using: .utf8)!
request.nonce = SHA256.hash(data: data).compactMap { String(format: &amp;quot;%02x&amp;quot;, $0) }.joined()

# サーバー
decoded_token[0][&amp;quot;nonce&amp;quot;] == Digest::SHA256.hexdigest(rawNonce)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;iOS 12以下をサポートしている場合、&lt;a href="https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPFrameworks/Concepts/WeakLinking.html#//apple_ref/doc/uid/20002378-107026"&gt;weak link&lt;/a&gt;する必要があるので忘れずに。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Targets &amp;gt; APP &amp;gt; Build Settings &amp;gt; Other Linker Flags に &lt;code&gt;-weak_framework CryptoKit&lt;/code&gt; を追加&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;リンク&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://openid-foundation-japan.github.io/draft-ietf-oauth-json-web-token-11.ja.html"&gt;JSON Web Token (JWT)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openid-foundation-japan.github.io/draft-ietf-jose-json-web-signature-14.ja.html#kidDef"&gt;JSON Web Signature (JWS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openid-foundation-japan.github.io/rfc7517.ja.html#kidDef"&gt;JSON Web Key (JWK)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jwt/ruby-jwt"&gt;jwt/ruby-jwt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/documentation/signinwithapplerestapi"&gt;Sign in with Apple REST API | Apple Developer Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;JWTは曖昧な理解、JWSやJWKは知らなかったので、色々と勉強になりました 💪&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>fastlaneのadd_badgeで数字が潰れる</title>
    <link rel="alternate" href="https://rono23.com/posts/shrunk-badge/"/>
    <id>https://rono23.com/posts/shrunk-badge/</id>
    <published>2019-08-22T00:00:00+09:00</published>
    <updated>2020-02-12T09:56:41+09:00</updated>
    <author>
      <name>rono23</name>
    </author>
    <content type="html">&lt;p&gt;アプリのアイコンにビルド番号などを追加してたけど、その数字が&lt;a href="https://github.com/HazAT/badge/issues/91"&gt;潰れる問題&lt;/a&gt;が発生。&lt;br&gt;
&lt;code&gt;pango 1.42.4&lt;/code&gt; だとOKとコメントがあったので、取り急ぎ古いバージョンをインストールして対処できた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula

## You need to fetch when commit log was grafted
# git log pango.rb
# git fetch --depth 50000

git checkout a8ac7ea5fe9339558c9fbe49acaa1a2452bcd4d0 pango.rb
brew reinstall pango
brew pin pango
git reset --hard
brew list --versions | grep pango #=&amp;gt; pango 1.42.4_2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pin&lt;/code&gt; したので、対応されたら &lt;code&gt;unpin&lt;/code&gt; して更新すればOK。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew unpin pango
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;追記：もっと簡単なやり方が&lt;a href="https://github.com/HazAT/badge/issues/91#issuecomment-534866597"&gt;コメント&lt;/a&gt;されてました。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>TestFlightのテスト内容の必須文字数が変更</title>
    <link rel="alternate" href="https://rono23.com/posts/testflight-whats-new-error/"/>
    <id>https://rono23.com/posts/testflight-whats-new-error/</id>
    <published>2019-07-22T00:00:00+09:00</published>
    <updated>2020-02-11T23:08:43+09:00</updated>
    <author>
      <name>rono23</name>
    </author>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Spaceship::UnexpectedResponse: [!] An attribute value has text that is too short. - Text for whatsNew is too short.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bitrise上で少し前からエラーが発生するようになって調べてみたら、TestFlightのテスト内容の必須文字数が変更になったっぽい 🤔&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;テスト内容は4文字以上でなければなりません。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;App Store Connect&lt;/code&gt; &amp;gt; &lt;code&gt;TestFlight&lt;/code&gt; &amp;gt; アプリ選択 &amp;gt; &lt;code&gt;テストの詳細&lt;/code&gt; で &lt;code&gt;テスト内容&lt;/code&gt; を9文字以下で保存するとエラー（5文字以上でも同じエラーメッセージ…）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Fastlane
- pilot(changelog: &amp;quot;9文字以下&amp;quot;, ...)
+ pilot(changelog: &amp;quot;10文字以上のテキスト&amp;quot;, ...)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;10文字以上に変更したら 🙆🎉&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;最近、月1でBitrise or Fastlaneで躓いてる気がする… 😭&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>2019年上半期に読んで面白かった本</title>
    <link rel="alternate" href="https://rono23.com/posts/books-i-read-in-the-first-half-of-2019/"/>
    <id>https://rono23.com/posts/books-i-read-in-the-first-half-of-2019/</id>
    <published>2019-06-29T00:00:00+09:00</published>
    <updated>2020-02-11T23:08:43+09:00</updated>
    <author>
      <name>rono23</name>
    </author>
    <content type="html">&lt;h4&gt;小説&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;ストーナー（ジョン・ウィリアムズ、東江一紀訳）

&lt;ul&gt;
&lt;li&gt;助教授として生きた男性の一生を過不足なく描き、素晴らしかった。たぶん今年1番の小説かも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;マーティン・イーデン（ジャック・ロンドン、辻井栄滋訳）

&lt;ul&gt;
&lt;li&gt;船乗りから小説家へ。労働者階級、ブルジョワ、哲学などなかなか激しかった。少し冗長的なところもあるけど、こちらも素晴らしかった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ジェイン・エア（シャーロット・ブロンテ、河島弘美訳）

&lt;ul&gt;
&lt;li&gt;女性の激動の一生。当時の貴族や宗教観を小説越しに見るの好きだなー&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他にもジョン・アップダイクやジョン・チーヴァーなど、今年初めて読んだ作家さんが多かった。&lt;br&gt;
ジョン・チーヴァーよりもレイモンド・カーヴァーのほうが好きなことがわかったけど、たぶん陰鬱の表現の差かなと思った。&lt;/p&gt;

&lt;h4&gt;技術書&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;OAuth徹底入門

&lt;ul&gt;
&lt;li&gt;曖昧だったので色々と勉強になった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Web API The Good Parts

&lt;ul&gt;
&lt;li&gt;目新しいことはなかったけど、わかりやすくまとまっていてよかった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Swift実践入門

&lt;ul&gt;
&lt;li&gt;今年に入ってから少しずつ書いてるけどなかなか慣れない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;iOS周りは勉強時間やコードを書いた時間が少なかったので、下半期はもっとコード書こ。&lt;/p&gt;

&lt;h4&gt;その他&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;NO HARD WORK!

&lt;ul&gt;
&lt;li&gt;相変わらずのBasecamp節！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;「エンタメ」の夜明け

&lt;ul&gt;
&lt;li&gt;ディズニーを誘致した話で、当時のビジネスが垣間見れて楽しかった。この本自体もエンタメやね&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;上半期は約30冊（漫画除く）しか読めなかったけど、あまりハズレが無かった印象。&lt;br&gt;
定期的にブログを書いていこうと思ったけど、書くのに慣れていないので難しい…&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Capybara WebkitからHeadless Chromeに移行</title>
    <link rel="alternate" href="https://rono23.com/posts/replace-capybara-webkit-with-headless-chrome/"/>
    <id>https://rono23.com/posts/replace-capybara-webkit-with-headless-chrome/</id>
    <published>2017-09-11T00:00:00+09:00</published>
    <updated>2020-02-11T23:08:43+09:00</updated>
    <author>
      <name>rono23</name>
    </author>
    <content type="html">&lt;p&gt;インストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Gemfile
group :test do
  gem &amp;#39;selenium-webdriver&amp;#39;
  gem &amp;#39;chromedriver-helper&amp;#39;
  ...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;chromedriver&lt;/code&gt; は &lt;code&gt;brew install chromedriver&lt;/code&gt; するか、上記のようにgemでインストールすると楽だけど、gemの場合、&lt;a href="https://github.com/flavorjones/chromedriver-helper#updating-to-latest-chromedriver"&gt;アップデート&lt;/a&gt;について少し念頭に入れておいたほうがいいかも。&lt;br&gt;
CircleCIだとimageに &lt;code&gt;circleci/ruby:2.4.1-node-browsers&lt;/code&gt; を指定していれば &lt;code&gt;chromedriver&lt;/code&gt; とか色々と入れてくれて、特に設定等しなくても動く。&lt;/p&gt;

&lt;p&gt;設定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# spec/rails_helper.rb
require &amp;#39;selenium/webdriver&amp;#39;

...

Capybara.register_driver :headless_chrome do |app|
  capabilities = Selenium::WebDriver::Remote::Capabilities.chrome(
    chromeOptions: { args: %w(headless disable-gpu window-size=1280,800) }
  )

  Capybara::Selenium::Driver.new app, browser: :chrome, desired_capabilities: capabilities
end
Capybara.javascript_driver = :headless_chrome
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修正が必要だったのは &lt;code&gt;trigger&lt;/code&gt;, &lt;code&gt;alert&lt;/code&gt;, &lt;code&gt;drag_to&lt;/code&gt; 周りで、最新のバージョンだと &lt;code&gt;save_and_open_screenshot&lt;/code&gt; も正常に動作しました。&lt;/p&gt;

&lt;p&gt;Versions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version
Google Chrome 61.0.3163.79

chromedriver -v
ChromeDriver 2.32.498537
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;trigger&lt;/code&gt; の削除&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# before
find(&amp;#39;i.icon-cancel&amp;#39;).trigger(&amp;#39;click&amp;#39;)

# after
find(&amp;#39;i.icon-cancel&amp;#39;).click
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;alert&lt;/code&gt; の修正&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# before
click_button I18n.t(:subscribe)

# after
accept_confirm { click_button I18n.t(:subscribe) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;drag_to&lt;/code&gt; の修正&lt;/p&gt;

&lt;p&gt;以下のような条件があると &lt;code&gt;drag_to&lt;/code&gt; が動かなくなったので、CSSで &lt;code&gt;width&lt;/code&gt; を大きめに設定したら動いた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;span class=&amp;#39;draggable&amp;#39;&amp;gt;&amp;lt;i class=&amp;#39;fa fa-arrows-v&amp;#39;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt; ようなアイコンだけ&lt;/li&gt;
&lt;li&gt;CSSで &lt;code&gt;.draggable { position: absolute; right: -100px; }&lt;/code&gt; みたいなこと&lt;/li&gt;
&lt;li&gt;window サイズが未設定（上記設定で &lt;code&gt;window-size=1280,800&lt;/code&gt; したのはこのため）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/updates/2017/04/headless-chrome?hl=ja"&gt;ヘッドレス Chrome ことはじめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://robots.thoughtbot.com/headless-feature-specs-with-chrome"&gt;Headless Capybara Feature Specs with Chrome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sites.google.com/a/chromium.org/chromedriver/getting-started"&gt;ChromeDriver - WebDriver for Chrome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/flavorjones/chromedriver-helper"&gt;flavorjones/chromedriver-helper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Webpackerで入れたVueにESLintを使う</title>
    <link rel="alternate" href="https://rono23.com/posts/vue-with-eslint-on-webpacker/"/>
    <id>https://rono23.com/posts/vue-with-eslint-on-webpacker/</id>
    <published>2017-09-08T00:00:00+09:00</published>
    <updated>2020-02-11T23:08:43+09:00</updated>
    <author>
      <name>rono23</name>
    </author>
    <content type="html">&lt;p&gt;インストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yarn add --dev eslint eslint-loader eslint-plugin-import eslint-config-airbnb-base eslint-plugin-vue@beta
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// .eslintrc
{
  env: {
    browser: true
  },
  &amp;#39;extends&amp;#39;: [
    &amp;#39;airbnb-base&amp;#39;,
    &amp;#39;plugin:vue/recommended&amp;#39;
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// config/webpack/development.js
const environment = require(&amp;#39;./environment&amp;#39;)

environment.loaders.set(&amp;#39;eslint&amp;#39;, {
  test: /\.(js|vue)$/,
  loader: &amp;#39;eslint-loader&amp;#39;,
  enforce: &amp;#39;pre&amp;#39;,
  options: {
    failOnWarning: true
  }
})

module.exports = environment.toWebpackConfig()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;options&lt;/code&gt; の設定は&lt;a href="https://github.com/MoOx/eslint-loader#options"&gt;公式&lt;/a&gt;を参考に、例えば &lt;code&gt;failOnWarning: true&lt;/code&gt; だとbuildに失敗してコンソールやログにエラーが表示されて、 &lt;code&gt;failOnWarning: false&lt;/code&gt; にするとbuildはとおってログにだけメッセージが残る。&lt;/p&gt;
</content>
  </entry>
</feed>
